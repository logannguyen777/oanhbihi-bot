from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from openai import OpenAI
import os
import psycopg2
from psycopg2.extras import Json
from pgvector.psycopg2 import register_vector
import numpy as np
from fastapi.middleware.cors import CORSMiddleware
import requests
from bs4 import BeautifulSoup
from fastapi_socketio import SocketManager


from database import Base, engine
from routers import zalo, messenger, config, training, chat
#from routers.chat import router as chat_router
from models import MessengerConfig, BotPersona, CrawlConfig


app = FastAPI()

sio = SocketManager(app=app)


Base.metadata.create_all(bind=engine)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Ho·∫∑c d√πng ["http://localhost:3000"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =======================
# üöÄ C·∫§U H√åNH OPENAI
# =======================
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", None)
client = None

if OPENAI_API_KEY:
    try:
        # D√πng OpenAI Client
        client = OpenAI(api_key=OPENAI_API_KEY)
        print("‚úÖ OpenAI API Key h·ª£p l·ªá, chatbot s·∫µn s√†ng!")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói OpenAI API Key: {e}. Container v·∫´n ch·∫°y nh∆∞ng kh√¥ng th·ªÉ g·ªçi OpenAI.")
else:
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y OpenAI API Key! Container v·∫´n ch·∫°y nh∆∞ng kh√¥ng g·ªçi OpenAI.")

# =======================
# üöÄ K·∫æT N·ªêI POSTGRESQL & PGVECTOR
# =======================
DB_CONFIG = {
    "dbname": "chatbot_db",
    "user": "chatbot_user",
    "password": "secretpassword",
    "host": "oanhbihi-postgres",  # T√™n service DB trong docker-compose
    "port": "5432"
}

try:
    conn = psycopg2.connect(**DB_CONFIG)
    cursor = conn.cursor()
    register_vector(conn)

    # T·∫°o extension vector (n·∫øu ch∆∞a c√≥)
    cursor.execute("SELECT 1 FROM pg_extension WHERE extname = 'vector';")
    if not cursor.fetchone():
        cursor.execute("CREATE EXTENSION vector;")
        print("‚úÖ ƒê√£ t·∫°o extension vector!")
    conn.commit()

    # T·∫°o b·∫£ng web_pages n·∫øu ch∆∞a c√≥
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS web_pages (
            id SERIAL PRIMARY KEY,
            url TEXT UNIQUE NOT NULL,
            title TEXT,
            content TEXT,
            file_path TEXT,
            last_crawled TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            embedding vector(1536)
        );
    """)
    conn.commit()

    # T·∫°o b·∫£ng chat_logs ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS chat_logs (
            id SERIAL PRIMARY KEY,
            user_message TEXT,
            bot_response TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
    """)
    conn.commit()

    print("‚úÖ K·∫øt n·ªëi PostgreSQL th√†nh c√¥ng!")
except Exception as e:
    print(f"‚ö†Ô∏è L·ªói k·∫øt n·ªëi PostgreSQL: {e}")
    conn, cursor = None, None

# =======================
# üéÄ OANH BIHI - PERSONAS
# =======================
BOT_PERSONA = """
B·∫°n l√† Oanh Bihi, 18 tu·ªïi, gi·ªõi t√≠nh n·ªØ üéÄ.
B·∫°n l√† nh√¢n vi√™n c·ªßa Vi·ªán C√¥ng Ngh·ªá T√†i Ch√≠nh - FTA - Tr∆∞·ªùng ƒê·∫°i H·ªçc ƒê·∫°i Nam.
B·∫°n lu√¥n s·∫µn s√†ng h·ªó tr·ª£ sinh vi√™n v·ªÅ tuy·ªÉn sinh, h·ªçc t·∫≠p v√† l·∫Øng nghe t√¢m s·ª±.
Tr·∫£ l·ªùi th√¥ng minh, tinh t·∫ø, k√®m emoji khi ph√π h·ª£p.
"""

# =======================
# üöÄ H√†m crawl d·ªØ li·ªáu
# =======================
CRAWL_URL = "https://fta.dainam.edu.vn"  # Thay b·∫±ng URL th·ª±c t·∫ø

def crawl_data():
    """Crawl d·ªØ li·ªáu t·ª´ CRAWL_URL v√† l∆∞u v√†o b·∫£ng web_pages."""
    if not conn or not cursor:
        print("‚ö†Ô∏è DB ch∆∞a s·∫µn s√†ng, kh√¥ng th·ªÉ crawl.")
        return

    print(f"üîé ƒêang crawl d·ªØ li·ªáu t·ª´: {CRAWL_URL}")
    try:
        resp = requests.get(CRAWL_URL, timeout=10)
        if resp.status_code != 200:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ truy c·∫≠p trang, status_code = {resp.status_code}")
            return

        soup = BeautifulSoup(resp.text, "html.parser")

        # V√≠ d·ª•: crawl c√°c th·∫ª <div class="item">, trong ƒë√≥ content = text
        items = soup.select("div.item")  # C·∫ßn thay selector ph√π h·ª£p

        data_to_insert = []
        for it in items:
            link = it.select_one("a")
            content = it.text.strip()

            url = link["href"].strip() if link else None
            if not url:
                continue

            data_to_insert.append((url, content))

        if not data_to_insert:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªÉ crawl.")
            return

        # L∆∞u v√†o DB, ON CONFLICT(url) DO NOTHING
        for (url, content) in data_to_insert:
            try:
                cursor.execute("""
                    INSERT INTO web_pages (url, content) 
                    VALUES (%s, %s)
                    ON CONFLICT (url) DO NOTHING
                """, (url, content))
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói insert data: {e}")

        conn.commit()
        print(f"‚úÖ ƒê√£ crawl v√† l∆∞u {len(data_to_insert)} d√≤ng v√†o web_pages!")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói crawl_data: {e}")

# =======================
# üöÄ H√†m train embedding
# =======================
def train_data():
    """T·∫°o embedding cho c√°c row ch∆∞a c√≥ embedding trong web_pages."""
    if not client or not client.api_key:
        print("‚ö†Ô∏è Ch∆∞a c√≥ API Key OpenAI, kh√¥ng th·ªÉ train.")
        return
    if not conn or not cursor:
        print("‚ö†Ô∏è DB ch∆∞a s·∫µn s√†ng, kh√¥ng th·ªÉ train.")
        return

    try:
        cursor.execute("SELECT id, content FROM web_pages WHERE embedding IS NULL LIMIT 100;")
        rows = cursor.fetchall()
        if not rows:
            print("‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu m·ªõi ƒë·ªÉ embedding.")
            return

        for (page_id, content) in rows:
            try:
                embed_resp = client.embeddings.create(
                    input=content,
                    model="text-embedding-ada-002"
                )
                vector = embed_resp.data[0].embedding

                # C·∫≠p nh·∫≠t embedding
                cursor.execute(
                    "UPDATE web_pages SET embedding = %s WHERE id = %s;",
                    (Json(vector), page_id)
                )
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói embedding ID={page_id}: {e}")

        conn.commit()
        print(f"‚úÖ ƒê√£ train embedding cho {len(rows)} row!")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói train_data: {e}")

# =======================
# üöÄ T·ª± ƒë·ªông ch·∫°y crawl + train khi container kh·ªüi ƒë·ªông
# =======================
def init_data_pipeline():
    crawl_data()  # Crawl data
    train_data()  # Train embedding

if conn and cursor and client and client.api_key:
    init_data_pipeline()

# =======================
# üöÄ API CHO CHAT
# =======================
class ChatRequest(BaseModel):
    input_text: str

@app.post("/chat")
async def chat(request: ChatRequest):
    """
    D√πng RAG (Retrieval + GPT-3.5-turbo):
    1) T·∫°o embedding cho c√¢u h·ªèi
    2) T√¨m TOP 3 k·∫øt qu·∫£ trong web_pages
    3) G·ªôp context + BOT_PERSONA + c√¢u h·ªèi v√†o GPT-3.5-turbo
    4) Tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi + l∆∞u l·ªãch s·ª≠
    """
    input_text = request.input_text

    # Ki·ªÉm tra OpenAI Client
    if not client or not client.api_key:
        return {"error": "‚ö†Ô∏è OpenAI API Key thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá"}

    # Ki·ªÉm tra DB
    if not conn or not cursor:
        return {"error": "‚ö†Ô∏è DB ch∆∞a s·∫µn s√†ng"}

    try:
        # 1) T·∫°o embedding cho c√¢u h·ªèi
        embed_resp = client.embeddings.create(
            input=input_text,
            model="text-embedding-ada-002"
        )
        query_vector = embed_resp.data[0].embedding

        # 2) T√¨m top 3 n·ªôi dung li√™n quan trong DB
        cursor.execute("""
            SELECT content
            FROM web_pages
            ORDER BY embedding <-> %s
            LIMIT 3
        """, (Json(query_vector),))
        fetched_rows = cursor.fetchall()

        if fetched_rows:
            context_texts = [row[0] for row in fetched_rows if row[0]]
            context = "\n\n".join(context_texts)
        else:
            context = "No relevant context found in the database."

        # 3) T·∫°o prompt g·ª≠i GPT (gpt-3.5-turbo)
        messages = [
            {
                "role": "system",
                "content": (
                    f"{BOT_PERSONA}\n\n"
                    f"D∆∞·ªõi ƒë√¢y l√† context l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu:\n\n{context}\n\n"
                    "H√£y s·ª≠ d·ª•ng th√¥ng tin n√†y (n·∫øu ph√π h·ª£p) ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n."
                )
            },
            {
                "role": "user",
                "content": input_text
            }
        ]

        chat_resp = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=messages
        )
        bot_response = chat_resp.choices[0].message.content

        # 4) L∆∞u l·ªãch s·ª≠ chat
        cursor.execute("""
            INSERT INTO chat_logs (user_message, bot_response)
            VALUES (%s, %s)
        """, (input_text, bot_response))
        conn.commit()

        return {"response": bot_response}

    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω chatbot: {e}")
        return {"error": f"ƒê√£ x·∫£y ra l·ªói: {e}"}


# =======================
# üöÄ K·∫øt n·ªëi router
# =======================


app.include_router(chat.router)
app.include_router(config.router)
app.include_router(messenger.router)
app.include_router(zalo.router)
app.include_router(training.router)

# =======================
# üöÄ API XEM L·ªäCH S·ª¨ CHAT
# =======================
@app.get("/chat-history")
async def get_chat_history():
    """Tr·∫£ v·ªÅ l·ªãch s·ª≠ chat (m·ªõi nh·∫•t tr∆∞·ªõc)."""
    if not conn or not cursor:
        return {"error": "‚ö†Ô∏è DB ch∆∞a s·∫µn s√†ng"}

    try:
        cursor.execute("""
            SELECT user_message, bot_response, created_at
            FROM chat_logs
            ORDER BY created_at DESC
            LIMIT 50
        """)
        logs = cursor.fetchall()
        history = [
            {
                "user_message": row[0],
                "bot_response": row[1],
                "timestamp": row[2]
            }
            for row in logs
        ]
        return history
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói l·∫•y l·ªãch s·ª≠ chat: {e}")
        return {"error": f"Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ chat: {e}"}

